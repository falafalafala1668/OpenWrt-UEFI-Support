--- target/linux/x86/image/Makefile	2020-03-21 19:47:19.461292437 +0800
+++ OpenWrt-UEFI-Support/src/target/linux/x86/image/Makefile	2020-03-21 23:33:10.586774797 +0800
@@ -36,6 +36,7 @@
   GRUB_TERMINAL_CONFIG := terminal_input $(GRUB_TERMINALS); terminal_output $(GRUB_TERMINALS)
 endif
 
+EFI_SIGNATURE:=$(strip $(shell uuidgen | tr '[a-z]' '[A-Z]'))
 ROOTPART:=$(call qstrip,$(CONFIG_TARGET_ROOTFS_PARTNAME))
 ROOTPART:=$(if $(ROOTPART),$(ROOTPART),PARTUUID=$(IMG_PART_SIGNATURE)-02)
 
@@ -44,6 +45,25 @@
 
 BOOTOPTS:=$(call qstrip,$(CONFIG_GRUB_BOOTOPTS))
 
+define Build/efi
+	$(CP) $(KDIR)/$(KERNEL_NAME) $@.boot/boot/vmlinuz
+	-$(CP) $(STAGING_DIR_ROOT)/boot/. $@.boot/boot/
+	SIGNATURE="$(EFI_SIGNATURE)" PATH="$(TARGET_PATH)" ./gen_image_efi.sh \
+		$@ \
+		$(CONFIG_TARGET_KERNEL_PARTSIZE) $@.boot \
+		$(CONFIG_TARGET_ROOTFS_PARTSIZE) $(IMAGE_ROOTFS) \
+		1 $(KDIR)/kernel.efi \
+		256
+
+	# Convert the MBR partition to GPT and set EFI ROOTFS signature
+	dd if=/dev/zero of=$@ bs=512 count=34 conv=notrunc oflag=append
+	sgdisk -g $@
+	sgdisk -t 3:EF00 $@
+	sgdisk -u 2:$(EFI_SIGNATURE) $@
+
+	echo -e -n "\xeb\x63\x99" | dd of=$@  bs=4 conv=notrunc
+endef
+
 define Build/combined
 	$(CP) $(KDIR)/$(KERNEL_NAME) $@.boot/boot/vmlinuz
 	-$(CP) $(STAGING_DIR_ROOT)/boot/. $@.boot/boot/
@@ -54,6 +74,23 @@
 		256
 endef
 
+define Build/grub-efi-config
+	rm -fR $@.boot
+	$(INSTALL_DIR) $@.boot/boot/grub
+	sed \
+		-e 's#@SERIAL_CONFIG@#$(strip $(GRUB_SERIAL_CONFIG))#g' \
+		-e 's#@TERMINAL_CONFIG@#$(strip $(GRUB_TERMINAL_CONFIG))#g' \
+		-e 's#@ROOTPART@#root=PARTUUID=$(EFI_SIGNATURE) rootwait#g' \
+		-e 's#@CMDLINE@#$(BOOTOPTS) $(GRUB_CONSOLE_CMDLINE)#g' \
+		-e 's#@TIMEOUT@#$(GRUB_TIMEOUT)#g' \
+		-e 's#@TITLE@#$(GRUB_TITLE)#g' \
+		-e 's#set root.*#search --file /boot/grub/$(IMG_PART_SIGNATURE).cfg --set=root#g' \
+		./grub-$(1).cfg > $@.boot/boot/grub/grub.cfg
+	$(CP) $@.boot/boot/grub/grub.cfg $@.boot/boot/grub/$(IMG_PART_SIGNATURE).cfg
+	echo "search --file /boot/grub/$(IMG_PART_SIGNATURE).cfg --set=root" > $(STAGING_DIR_HOST)/lib/grub/grub2.efi/efi/boot/grub.cfg
+	echo "configfile /boot/grub/grub.cfg" >> $(STAGING_DIR_HOST)/lib/grub/grub2.efi/efi/boot/grub.cfg
+endef
+
 define Build/grub-config
 	rm -fR $@.boot
 	$(INSTALL_DIR) $@.boot/boot/grub
@@ -81,6 +118,15 @@
 		$@
 endef
 
+define Build/grub-efi-install
+	rm $(KDIR)/kernel.efi || true
+	mkfs.fat -C $(KDIR)/kernel.efi -S 512 1024
+	mcopy -s -i "$(KDIR)/kernel.efi" $(STAGING_DIR_HOST)/lib/grub/grub2.efi/* ::/
+endef
+
+define Build/iso-efi
+endef
+
 define Build/iso
 	$(CP) $(KDIR)/$(KERNEL_NAME) $@.boot/boot/vmlinuz
 	cat \
@@ -99,10 +145,20 @@
   IMAGE/combined.img.gz := append-rootfs | pad-extra 128k | grub-config pc | combined | grub-install | gzip
   IMAGE/combined.vdi := append-rootfs | pad-extra 128k | grub-config pc | combined | grub-install | qemu-image vdi
   IMAGE/combined.vmdk := append-rootfs | pad-extra 128k | grub-config pc | combined | grub-install | qemu-image vmdk
+  IMAGE/uefi-gpt.img := append-rootfs | pad-extra 128k | grub-efi-config pc | grub-efi-install | efi
+  IMAGE/uefi-gpt.img.gz := append-rootfs | pad-extra 128k | grub-efi-config pc | grub-efi-install | efi | gzip
+  IMAGE/uefi-gpt.vdi := append-rootfs | pad-extra 128k | grub-efi-config pc | grub-efi-install | efi | qemu-image vdi
+  IMAGE/uefi-gpt.vmdk := append-rootfs | pad-extra 128k | grub-efi-config pc | grub-efi-install | efi | qemu-image vmdk
   ifeq ($(CONFIG_TARGET_IMAGES_GZIP),y)
     IMAGES := combined.img.gz
+	ifeq ($(CONFIG_EFI_IMAGES),y)
+        IMAGES := uefi-gpt.img.gz
+	endif
   else
     IMAGES := combined.img
+	ifeq ($(CONFIG_EFI_IMAGES),y)
+		IMAGES := uefi-gpt.img
+	endif
   endif
   KERNEL := kernel-bin
   KERNEL_INSTALL := 1
@@ -112,9 +168,15 @@
   endif
   ifeq ($(CONFIG_VDI_IMAGES),y)
     IMAGES += combined.vdi
+	ifeq ($(CONFIG_EFI_IMAGES),y)
+		IMAGES := uefi-gpt.vdi
+	endif
   endif
   ifeq ($(CONFIG_VMDK_IMAGES),y)
     IMAGES += combined.vmdk
+	ifeq ($(CONFIG_EFI_IMAGES),y)
+		IMAGES := uefi-gpt.vmdk
+	endif
   endif
 endef
 
